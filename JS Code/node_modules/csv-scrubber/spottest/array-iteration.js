'use strict';

const assert = require('assert');

describe('array iteration', function() {

  let a = ['foo', 'bar'];
  a.myProp = 'zoo';
  a.myFunc = () => {
    return ['man'];
  };

  // This is why you should never use `let i in array` to iterate over an array
  // (unless you really want to iterate over its properties and you
  // don't care about index order). `let i in object` is meant to iterate over
  // object properties. Use one of the other methods shown below to iterate over
  // array elements. Many libraries (including this one) add methods and
  // properties to arrays.
  let innames = {};
  for (let i in a) {
    innames[i] = true;
  }

  it('let i in should contain 0', function() {
    assert('0' in innames);
  });
  it('let i in should contain 1', function() {
    assert('1' in innames);
  });
  it('let i in should contain myProp', function() {
    assert(('myProp' in innames));
  });
  it('let i in should contain myFunc', function() {
    assert(('myFunc' in innames));
  });

  it('should assert true', function() {
    assert(a[0]);
    assert(a[1]);
    assert(a.myProp);
    assert(a.myFunc);
  });

  let stdnames = {};
  for (let i = 0, l = a.length; i < l; i++) {
    stdnames[i] = true;
  }

  it('old fashioned loop should contain 0', function() {
    assert('0' in stdnames);
  });
  it('old fashioned loop should contain 1', function() {
    assert('1' in stdnames);
  });
  it('old fashioned loop should NOT contain myProp', function() {
    assert(!('myProp' in stdnames));
  });
  it('old fashioned loop should NOT contain myFunc', function() {
    assert(!('myFunc' in stdnames));
  });

  let ofnames = {};
  for (let i of a) {
    ofnames[i] = true;
  }

  it('let i of should contain foo', function() {
    assert('foo' in ofnames);
  });
  it('let i of should contain bar', function() {
    assert('bar' in ofnames);
  });
  it('let i of should NOT contain myProp', function() {
    assert(!('myProp' in ofnames));
  });
  it('let i of should NOT contain myFunc', function() {
    assert(!('myFunc' in ofnames));
  });

  let eachvals = {};
  a.forEach((v) => {
    eachvals[v] = true;
  });

  console.log(eachvals);

  it('forEach should contain foo', function() {
    assert('foo' in eachvals);
  });
  it('forEach should contain bar', function() {
    assert('bar' in eachvals);
  });
  it('forEach should NOT contain myProp', function() {
    assert(!('myProp' in eachvals));
  });
  it('forEach should NOT contain myFunc', function() {
    assert(!('myFunc' in eachvals));
  });

});